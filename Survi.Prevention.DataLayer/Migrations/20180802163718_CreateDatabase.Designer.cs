// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Survi.Prevention.DataLayer;

namespace Survi.Prevention.DataLayer.Migrations
{
    [DbContext(typeof(ManagementContext))]
    [Migration("20180802163718_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:postgis", "'postgis', '', ''")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", "'uuid-ossp', '', ''")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.AlarmPanelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_alarm_panel_type");

                    b.ToTable("alarm_panel_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721814"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721817"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72181a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72181d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.AlarmPanelTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_alarm_panel_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_alarm_panel_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("alarm_panel_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721815"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721814"), IsActive = true, LanguageCode = "fr", Name = "Intrusion" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721816"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721814"), IsActive = true, LanguageCode = "fr", Name = "Intrusion" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721818"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721817"), IsActive = true, LanguageCode = "fr", Name = "Non zoné" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721819"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721817"), IsActive = true, LanguageCode = "fr", Name = "Not zoned" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72181b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72181a"), IsActive = true, LanguageCode = "fr", Name = "Zoné" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72181c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72181a"), IsActive = true, LanguageCode = "fr", Name = "Zoned" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72181e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72181d"), IsActive = true, LanguageCode = "fr", Name = "Adressable" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72181f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72181d"), IsActive = true, LanguageCode = "fr", Name = "Adressable" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AppartmentNumber")
                        .IsRequired()
                        .HasColumnName("appartment_number")
                        .HasMaxLength(10);

                    b.Property<decimal>("BuildingValue")
                        .HasColumnName("building_value");

                    b.Property<int>("ChildType")
                        .HasColumnName("child_type");

                    b.Property<string>("CivicLetter")
                        .IsRequired()
                        .HasColumnName("civic_letter")
                        .HasMaxLength(10);

                    b.Property<string>("CivicLetterSupp")
                        .IsRequired()
                        .HasColumnName("civic_letter_supp")
                        .HasMaxLength(10);

                    b.Property<string>("CivicNumber")
                        .IsRequired()
                        .HasColumnName("civic_number")
                        .HasMaxLength(15);

                    b.Property<string>("CivicSupp")
                        .IsRequired()
                        .HasColumnName("civic_supp")
                        .HasMaxLength(10);

                    b.Property<Point>("Coordinates")
                        .HasColumnName("coordinates")
                        .HasColumnType("geography");

                    b.Property<string>("CoordinatesSource")
                        .IsRequired()
                        .HasColumnName("coordinates_source")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnName("details");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnName("floor")
                        .HasMaxLength(10);

                    b.Property<Guid>("IdCity")
                        .HasColumnName("id_city");

                    b.Property<Guid>("IdLane")
                        .HasColumnName("id_lane");

                    b.Property<Guid?>("IdLaneTransversal")
                        .HasColumnName("id_lane_transversal");

                    b.Property<Guid?>("IdParentBuilding")
                        .HasColumnName("id_parent_building");

                    b.Property<Guid?>("IdPicture")
                        .HasColumnName("id_picture");

                    b.Property<Guid>("IdRiskLevel")
                        .HasColumnName("id_risk_level");

                    b.Property<Guid?>("IdUtilisationCode")
                        .HasColumnName("id_utilisation_code");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasColumnName("matricule")
                        .HasMaxLength(18);

                    b.Property<int>("NumberOfAppartment")
                        .HasColumnName("number_of_appartment");

                    b.Property<int>("NumberOfBuilding")
                        .HasColumnName("number_of_building");

                    b.Property<int>("NumberOfFloor")
                        .HasColumnName("number_of_floor");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnName("postal_code")
                        .HasMaxLength(6);

                    b.Property<bool>("ShowInResources")
                        .HasColumnName("show_in_resources");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnName("source")
                        .HasMaxLength(25);

                    b.Property<int>("Suite")
                        .HasColumnName("suite");

                    b.Property<string>("UtilisationDescription")
                        .IsRequired()
                        .HasColumnName("utilisation_description")
                        .HasMaxLength(255);

                    b.Property<bool>("VacantLand")
                        .HasColumnName("vacant_land");

                    b.Property<int>("YearOfConstruction")
                        .HasColumnName("year_of_construction");

                    b.HasKey("Id")
                        .HasName("pk_building");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdLane");

                    b.HasIndex("IdLaneTransversal");

                    b.HasIndex("IdParentBuilding");

                    b.HasIndex("IdPicture");

                    b.HasIndex("IdRiskLevel");

                    b.HasIndex("IdUtilisationCode");

                    b.ToTable("building");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingAlarmPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Floor")
                        .HasColumnName("floor")
                        .HasMaxLength(100);

                    b.Property<Guid?>("IdAlarmPanelType")
                        .HasColumnName("id_alarm_panel_type");

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Sector")
                        .HasColumnName("sector")
                        .HasMaxLength(100);

                    b.Property<string>("Wall")
                        .HasColumnName("wall")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_building_alarm_panel");

                    b.HasIndex("IdAlarmPanelType");

                    b.HasIndex("IdBuilding");

                    b.ToTable("building_alarm_panel");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingAnomaly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Notes")
                        .HasColumnName("notes");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnName("theme")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_building_anomaly");

                    b.HasIndex("IdBuilding");

                    b.ToTable("building_anomaly");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingAnomalyPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdBuildingAnomaly")
                        .HasColumnName("id_building_anomaly");

                    b.Property<Guid>("IdPicture")
                        .HasColumnName("id_picture");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_building_anomaly_picture");

                    b.HasIndex("IdBuildingAnomaly");

                    b.HasIndex("IdPicture");

                    b.ToTable("building_anomaly_picture");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CallPriority")
                        .HasColumnName("call_priority");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasColumnName("cellphone_number")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(30);

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsOwner")
                        .HasColumnName("is_owner");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(30);

                    b.Property<string>("OtherNumber")
                        .IsRequired()
                        .HasColumnName("other_number")
                        .HasMaxLength(10);

                    b.Property<string>("OtherNumberExtension")
                        .IsRequired()
                        .HasColumnName("other_number_extension")
                        .HasMaxLength(10);

                    b.Property<string>("PagerCode")
                        .IsRequired()
                        .HasColumnName("pager_code")
                        .HasMaxLength(10);

                    b.Property<string>("PagerNumber")
                        .IsRequired()
                        .HasColumnName("pager_number")
                        .HasMaxLength(10);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnName("phone_number")
                        .HasMaxLength(10);

                    b.Property<string>("PhoneNumberExtension")
                        .IsRequired()
                        .HasColumnName("phone_number_extension")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("pk_building_contact");

                    b.HasIndex("IdBuilding");

                    b.ToTable("building_contact");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<Guid>("IdFirestation")
                        .HasColumnName("id_firestation");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_building_course");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdFirestation");

                    b.ToTable("building_course");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingCourseLane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<int>("Direction")
                        .HasColumnName("direction");

                    b.Property<Guid>("IdBuildingCourse")
                        .HasColumnName("id_building_course");

                    b.Property<Guid>("IdLane")
                        .HasColumnName("id_lane");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("pk_building_course_lane");

                    b.HasIndex("IdBuildingCourse");

                    b.HasIndex("IdLane");

                    b.ToTable("building_course_lane");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasColumnName("additional_information");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnName("approved_on");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<int>("EstimatedWaterFlow")
                        .HasColumnName("estimated_water_flow");

                    b.Property<Guid?>("FireResistanceTypeId")
                        .HasColumnName("fire_resistance_type_id");

                    b.Property<int>("GarageType")
                        .HasColumnName("garage_type");

                    b.Property<decimal>("Height")
                        .HasColumnName("height");

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<Guid?>("IdBuildingSidingType")
                        .HasColumnName("id_building_siding_type");

                    b.Property<Guid?>("IdBuildingType")
                        .HasColumnName("id_building_type");

                    b.Property<Guid?>("IdConstructionFireResistanceType")
                        .HasColumnName("id_construction_fire_resistance_type");

                    b.Property<Guid?>("IdConstructionType")
                        .HasColumnName("id_construction_type");

                    b.Property<Guid?>("IdPicturePlan")
                        .HasColumnName("id_picture_plan");

                    b.Property<Guid?>("IdRoofMaterialType")
                        .HasColumnName("id_roof_material_type");

                    b.Property<Guid?>("IdRoofType")
                        .HasColumnName("id_roof_type");

                    b.Property<Guid?>("IdUnitOfMeasureEstimatedWaterFlow")
                        .HasColumnName("id_unit_of_measure_estimated_water_flow");

                    b.Property<Guid?>("IdUnitOfMeasureHeight")
                        .HasColumnName("id_unit_of_measure_height");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("RevisedOn")
                        .HasColumnName("revised_on");

                    b.HasKey("Id")
                        .HasName("pk_building_detail");

                    b.HasIndex("FireResistanceTypeId")
                        .HasName("ix_building_detail_fire_resistance_type_id");

                    b.HasIndex("IdBuilding")
                        .IsUnique();

                    b.HasIndex("IdBuildingSidingType");

                    b.HasIndex("IdBuildingType");

                    b.HasIndex("IdConstructionType");

                    b.HasIndex("IdPicturePlan");

                    b.HasIndex("IdRoofMaterialType");

                    b.HasIndex("IdRoofType");

                    b.HasIndex("IdUnitOfMeasureEstimatedWaterFlow");

                    b.HasIndex("IdUnitOfMeasureHeight");

                    b.ToTable("building_detail");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingFireHydrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnName("deleted_on");

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<Guid>("IdFireHydrant")
                        .HasColumnName("id_fire_hydrant");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_building_fire_hydrant");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdFireHydrant");

                    b.ToTable("building_fire_hydrant");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingHazardousMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("CapacityContainer")
                        .HasColumnName("capacity_container");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnName("container")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnName("floor")
                        .HasMaxLength(4);

                    b.Property<string>("GasInlet")
                        .IsRequired()
                        .HasColumnName("gas_inlet")
                        .HasMaxLength(100);

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<Guid>("IdHazardousMaterial")
                        .HasColumnName("id_hazardous_material");

                    b.Property<Guid?>("IdUnitOfMeasure")
                        .HasColumnName("id_unit_of_measure");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("OtherInformation")
                        .IsRequired()
                        .HasColumnName("other_information");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnName("place")
                        .HasMaxLength(150);

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnName("sector")
                        .HasMaxLength(15);

                    b.Property<string>("SecurityPerimeter")
                        .IsRequired()
                        .HasColumnName("security_perimeter");

                    b.Property<string>("SupplyLine")
                        .IsRequired()
                        .HasColumnName("supply_line")
                        .HasMaxLength(50);

                    b.Property<int>("TankType")
                        .HasColumnName("tank_type");

                    b.Property<string>("Wall")
                        .IsRequired()
                        .HasColumnName("wall")
                        .HasMaxLength(15);

                    b.HasKey("Id")
                        .HasName("pk_building_hazardous_material");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdHazardousMaterial");

                    b.HasIndex("IdUnitOfMeasure");

                    b.ToTable("building_hazardous_material");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_building");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(250);

                    b.HasKey("Id")
                        .HasName("pk_building_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("building_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingParticularRisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Dimension")
                        .HasColumnName("dimension")
                        .HasMaxLength(100);

                    b.Property<bool>("HasOpening")
                        .HasColumnName("has_opening");

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsWeakened")
                        .HasColumnName("is_weakened");

                    b.Property<string>("Sector")
                        .HasColumnName("sector")
                        .HasMaxLength(15);

                    b.Property<string>("Wall")
                        .HasColumnName("wall")
                        .HasMaxLength(15);

                    b.Property<int>("risk_type");

                    b.HasKey("Id")
                        .HasName("pk_building_particular_risk");

                    b.HasIndex("IdBuilding");

                    b.ToTable("building_particular_risk");

                    b.HasDiscriminator<int>("risk_type");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingParticularRiskPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdBuildingParticularRisk")
                        .HasColumnName("id_building_particular_risk");

                    b.Property<Guid>("IdPicture")
                        .HasColumnName("id_picture");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_building_particular_risk_picture");

                    b.HasIndex("IdBuildingParticularRisk");

                    b.HasIndex("IdPicture");

                    b.ToTable("building_particular_risk_picture");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingPersonRequiringAssistance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnName("contact_name")
                        .HasMaxLength(60);

                    b.Property<string>("ContactPhoneNumber")
                        .IsRequired()
                        .HasColumnName("contact_phone_number")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("DayIsApproximate")
                        .HasColumnName("day_is_approximate");

                    b.Property<int>("DayResidentCount")
                        .HasColumnName("day_resident_count");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<bool>("EveningIsApproximate")
                        .HasColumnName("evening_is_approximate");

                    b.Property<int>("EveningResidentCount")
                        .HasColumnName("evening_resident_count");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnName("floor")
                        .HasMaxLength(3);

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<Guid>("IdPersonRequiringAssistanceType")
                        .HasColumnName("id_person_requiring_assistance_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnName("local")
                        .HasMaxLength(10);

                    b.Property<bool>("NightIsApproximate")
                        .HasColumnName("night_is_approximate");

                    b.Property<int>("NightResidentCount")
                        .HasColumnName("night_resident_count");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnName("person_name")
                        .HasMaxLength(60);

                    b.HasKey("Id")
                        .HasName("pk_building_person_requiring_assistance");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdPersonRequiringAssistanceType");

                    b.ToTable("building_person_requiring_assistance");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingSprinkler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CollectorLocation")
                        .HasColumnName("collector_location");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Floor")
                        .HasColumnName("floor")
                        .HasMaxLength(100);

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<Guid>("IdSprinklerType")
                        .HasColumnName("id_sprinkler_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("PipeLocation")
                        .HasColumnName("pipe_location");

                    b.Property<string>("Sector")
                        .HasColumnName("sector")
                        .HasMaxLength(100);

                    b.Property<string>("Wall")
                        .HasColumnName("wall")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_building_sprinkler");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdSprinklerType");

                    b.ToTable("building_sprinkler");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_building_type");

                    b.ToTable("building_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72179c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72179f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a5"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_building_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_building_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("building_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72179d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72179c"), IsActive = true, LanguageCode = "fr", Name = "Attaché" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72179e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72179c"), IsActive = true, LanguageCode = "fr", Name = "Attached" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a0"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72179f"), IsActive = true, LanguageCode = "fr", Name = "Détaché" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72179f"), IsActive = true, LanguageCode = "fr", Name = "Detached" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a3"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a2"), IsActive = true, LanguageCode = "fr", Name = "Jumelé" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a4"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a2"), IsActive = true, LanguageCode = "fr", Name = "Semi-detached" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a6"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a5"), IsActive = true, LanguageCode = "fr", Name = "Autre" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a7"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a5"), IsActive = true, LanguageCode = "fr", Name = "Other" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.ConstructionFireResistanceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_construction_fire_resistance_type");

                    b.ToTable("construction_fire_resistance_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72178a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72178d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721790"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721793"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721796"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721799"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72186a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72186d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721870"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721873"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721876"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721879"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.ConstructionFireResistanceTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_parent");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_construction_fire_resistance_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("construction_fire_resistance_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72178b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72178a"), IsActive = true, LanguageCode = "fr", Name = "Ordinaire" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72178c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72178a"), IsActive = true, LanguageCode = "fr", Name = "Regular" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72178e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72178d"), IsActive = true, LanguageCode = "fr", Name = "Combustible" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72178f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72178d"), IsActive = true, LanguageCode = "fr", Name = "Flammable" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721791"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721790"), IsActive = true, LanguageCode = "fr", Name = "Incombustible" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721792"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721790"), IsActive = true, LanguageCode = "fr", Name = "Nonflammable" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721794"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721793"), IsActive = true, LanguageCode = "fr", Name = "Résistante au feu" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721795"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721793"), IsActive = true, LanguageCode = "fr", Name = "Fire resistant" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721797"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721796"), IsActive = true, LanguageCode = "fr", Name = "Hybride" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721798"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721796"), IsActive = true, LanguageCode = "fr", Name = "Hybrid" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72179a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721799"), IsActive = true, LanguageCode = "fr", Name = "Test2" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72179b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721799"), IsActive = true, LanguageCode = "fr", Name = "Test2" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72186b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72186a"), IsActive = true, LanguageCode = "fr", Name = "Ordinaire" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72186c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72186a"), IsActive = true, LanguageCode = "fr", Name = "Regular" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72186e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72186d"), IsActive = true, LanguageCode = "fr", Name = "Combustible" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72186f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72186d"), IsActive = true, LanguageCode = "fr", Name = "Flammable" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721871"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721870"), IsActive = true, LanguageCode = "fr", Name = "Incombustible" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721872"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721870"), IsActive = true, LanguageCode = "fr", Name = "Nonflammable" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721874"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721873"), IsActive = true, LanguageCode = "fr", Name = "Résistante au feu" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721875"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721873"), IsActive = true, LanguageCode = "fr", Name = "Fire resistant" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721877"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721876"), IsActive = true, LanguageCode = "fr", Name = "Hybride" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721878"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721876"), IsActive = true, LanguageCode = "fr", Name = "Hybrid" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72187a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721879"), IsActive = true, LanguageCode = "fr", Name = "Test2" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72187b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721879"), IsActive = true, LanguageCode = "fr", Name = "Test2" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.ConstructionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_construction_type");

                    b.ToTable("construction_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72176b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72176f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721772"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721775"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721778"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72177b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72177e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721781"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721784"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721787"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.ConstructionTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_construction_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_construction_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("construction_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72176d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72176b"), IsActive = true, LanguageCode = "fr", Name = "Ossature de bois avec solives préfabriquées" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72176e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72176b"), IsActive = true, LanguageCode = "fr", Name = "Wood frame and prefabricated joists" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721770"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72176f"), IsActive = true, LanguageCode = "fr", Name = "Gros bois d'oeuvre" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721771"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72176f"), IsActive = true, LanguageCode = "fr", Name = "Lumber" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721773"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721772"), IsActive = true, LanguageCode = "fr", Name = "Mur porteur en maçonnerie avec mur solives en bois solides" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721774"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721772"), IsActive = true, LanguageCode = "fr", Name = "Masonry bearing wall and solid wood joists" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721776"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721775"), IsActive = true, LanguageCode = "fr", Name = "Mur porteur en maçonnerie et solives préfabriquées" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721777"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721775"), IsActive = true, LanguageCode = "fr", Name = "Masonry bearing wall and prefabricated joists" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721779"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721778"), IsActive = true, LanguageCode = "fr", Name = "Mur porteur en maçonnerie et solives en aciers ou dalle de béton" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72177a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721778"), IsActive = true, LanguageCode = "fr", Name = "Masonry bearing wall and steel joists or concrete slab" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72177c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72177b"), IsActive = true, LanguageCode = "fr", Name = "Acier avec solives en acier protégées" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72177d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72177b"), IsActive = true, LanguageCode = "fr", Name = "Steel with protected steel joists" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72177f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72177e"), IsActive = true, LanguageCode = "fr", Name = "Acier avec solives en acier non protégées" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721780"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72177e"), IsActive = true, LanguageCode = "fr", Name = "Steel with unprotected steel joists" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721782"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721781"), IsActive = true, LanguageCode = "fr", Name = "Béton" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721783"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721781"), IsActive = true, LanguageCode = "fr", Name = "Concrete" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721785"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721784"), IsActive = true, LanguageCode = "fr", Name = "Autre type" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721786"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721784"), IsActive = true, LanguageCode = "fr", Name = "Other" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721788"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721787"), IsActive = true, LanguageCode = "fr", Name = "Indéterminé" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721789"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721787"), IsActive = true, LanguageCode = "fr", Name = "Undetermined" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.HazardousMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("GuideNumber")
                        .IsRequired()
                        .HasColumnName("guide_number")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("number")
                        .HasMaxLength(50);

                    b.Property<bool>("ReactToWater")
                        .HasColumnName("react_to_water");

                    b.Property<bool>("ToxicInhalationHazard")
                        .HasColumnName("toxic_inhalation_hazard");

                    b.HasKey("Id")
                        .HasName("pk_hazardous_material");

                    b.ToTable("hazardous_material");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.HazardousMaterialLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_hazardous_material");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(250);

                    b.HasKey("Id")
                        .HasName("pk_hazardous_material_localization");

                    b.HasIndex("IdParent", "IsActive", "LanguageCode");

                    b.ToTable("hazardous_material_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.PersonRequiringAssistanceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_person_requiring_assistance_type");

                    b.ToTable("person_requiring_assistance_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721820"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721823"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721826"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721829"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72182c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72182f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721832"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721835"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721838"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72183b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72183e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721841"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721844"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721847"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.PersonRequiringAssistanceTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_person_requiring_assistance_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_person_requiring_assistance_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("person_requiring_assistance_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721821"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721820"), IsActive = true, LanguageCode = "fr", Name = "Camp/Terrain de jeu" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721822"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721820"), IsActive = true, LanguageCode = "fr", Name = "Camp/playground" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721824"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721823"), IsActive = true, LanguageCode = "fr", Name = "Personnes handicapées" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721825"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721823"), IsActive = true, LanguageCode = "fr", Name = "Handicapped person" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721827"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721826"), IsActive = true, LanguageCode = "fr", Name = "Trouble vision" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721828"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721826"), IsActive = true, LanguageCode = "fr", Name = "Visually impaired" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72182a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721829"), IsActive = true, LanguageCode = "fr", Name = "Surdité" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72182b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721829"), IsActive = true, LanguageCode = "fr", Name = "Deafness" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72182d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72182c"), IsActive = true, LanguageCode = "fr", Name = "Cognitif" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72182e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72182c"), IsActive = true, LanguageCode = "fr", Name = "Cognitive" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721830"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72182f"), IsActive = true, LanguageCode = "fr", Name = "Autre" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721831"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72182f"), IsActive = true, LanguageCode = "fr", Name = "Other" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721833"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721832"), IsActive = true, LanguageCode = "fr", Name = "Centre médical" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721834"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721832"), IsActive = true, LanguageCode = "fr", Name = "Medical center" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721836"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721835"), IsActive = true, LanguageCode = "fr", Name = "Déficients intellectuels" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721837"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721835"), IsActive = true, LanguageCode = "fr", Name = "Intellectual deficient" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721839"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721838"), IsActive = true, LanguageCode = "fr", Name = "École" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72183a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721838"), IsActive = true, LanguageCode = "fr", Name = "School" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72183c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72183b"), IsActive = true, LanguageCode = "fr", Name = "Garderie" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72183d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72183b"), IsActive = true, LanguageCode = "fr", Name = "Nursery" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72183f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72183e"), IsActive = true, LanguageCode = "fr", Name = "Malentendants" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721840"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72183e"), IsActive = true, LanguageCode = "fr", Name = "Hard of hearing" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721842"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721841"), IsActive = true, LanguageCode = "fr", Name = "Mobilité réduite" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721843"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721841"), IsActive = true, LanguageCode = "fr", Name = "Reduced mobility" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721845"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721844"), IsActive = true, LanguageCode = "fr", Name = "Non-voyants" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721846"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721844"), IsActive = true, LanguageCode = "fr", Name = "Blind" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721848"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721847"), IsActive = true, LanguageCode = "fr", Name = "Personnes agées" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721849"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721847"), IsActive = true, LanguageCode = "fr", Name = "Elderly" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RiskLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnName("code");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("pk_risk_level");

                    b.ToTable("risk_level");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721942"), Code = 1, Color = "-16744448", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Sequence = 1 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721945"), Code = 2, Color = "-256", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Sequence = 2 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721948"), Code = 3, Color = "-23296", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Sequence = 3 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72194b"), Code = 4, Color = "-65536", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Sequence = 4 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72194e"), Code = 0, Color = "-16777216", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Sequence = 0 }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RiskLevelLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_risk_level");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_risk_level_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("risk_level_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721943"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721942"), IsActive = true, LanguageCode = "fr", Name = "Faible" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721944"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721942"), IsActive = true, LanguageCode = "fr", Name = "Low" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721946"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721945"), IsActive = true, LanguageCode = "fr", Name = "Moyen" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721947"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721945"), IsActive = true, LanguageCode = "fr", Name = "Medium" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721949"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721948"), IsActive = true, LanguageCode = "fr", Name = "Élevé" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72194a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721948"), IsActive = true, LanguageCode = "fr", Name = "High" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72194c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72194b"), IsActive = true, LanguageCode = "fr", Name = "Très élevé" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72194d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72194b"), IsActive = true, LanguageCode = "fr", Name = "Very high" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72194f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72194e"), IsActive = true, LanguageCode = "fr", Name = "Indéterminé" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721950"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72194e"), IsActive = true, LanguageCode = "fr", Name = "Unknown" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RoofMaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_roof_material_type");

                    b.ToTable("roof_material_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c3"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c6"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c9"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217cc"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217cf"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RoofMaterialTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_roof_material_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_roof_material_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("roof_material_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c4"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c3"), IsActive = true, LanguageCode = "fr", Name = "Bardeaux d'asphalte" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c5"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c3"), IsActive = true, LanguageCode = "fr", Name = "Asphalt shingles" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c7"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c6"), IsActive = true, LanguageCode = "fr", Name = "Tôle" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c8"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c6"), IsActive = true, LanguageCode = "fr", Name = "Sheet metal" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ca"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c9"), IsActive = true, LanguageCode = "fr", Name = "Tapis de goudron" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217cb"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c9"), IsActive = true, LanguageCode = "fr", Name = "Tar mat" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217cd"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217cc"), IsActive = true, LanguageCode = "fr", Name = "Puit de lumière" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ce"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217cc"), IsActive = true, LanguageCode = "fr", Name = "Skylight" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d0"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217cf"), IsActive = true, LanguageCode = "fr", Name = "Bois" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217cf"), IsActive = true, LanguageCode = "fr", Name = "Wood" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72187d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72187c"), IsActive = true, LanguageCode = "fr", Name = "GIPM" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72187e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72187c"), IsActive = true, LanguageCode = "fr", Name = "GIPM" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721880"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72187f"), IsActive = true, LanguageCode = "fr", Name = "GPM" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721881"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72187f"), IsActive = true, LanguageCode = "fr", Name = "GPM" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721883"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721882"), IsActive = true, LanguageCode = "fr", Name = "LPM" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721884"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721882"), IsActive = true, LanguageCode = "fr", Name = "LPM" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721886"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721885"), IsActive = true, LanguageCode = "fr", Name = "GI" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721887"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721885"), IsActive = true, LanguageCode = "fr", Name = "GI" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721889"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721888"), IsActive = true, LanguageCode = "fr", Name = "G" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72188a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721888"), IsActive = true, LanguageCode = "fr", Name = "G" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72188c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72188b"), IsActive = true, LanguageCode = "fr", Name = "L" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72188d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72188b"), IsActive = true, LanguageCode = "fr", Name = "L" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72188f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72188e"), IsActive = true, LanguageCode = "fr", Name = "Indéterminé" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721890"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72188e"), IsActive = true, LanguageCode = "fr", Name = "Unknown" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721892"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721891"), IsActive = true, LanguageCode = "fr", Name = "PSI" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721893"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721891"), IsActive = true, LanguageCode = "fr", Name = "PSI" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721895"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721894"), IsActive = true, LanguageCode = "fr", Name = "KPA" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721896"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721894"), IsActive = true, LanguageCode = "fr", Name = "KPA" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721898"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721897"), IsActive = true, LanguageCode = "fr", Name = "m3/h" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721899"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721897"), IsActive = true, LanguageCode = "fr", Name = "m3/h" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72189b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72189a"), IsActive = true, LanguageCode = "fr", Name = "Millimètres" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72189c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72189a"), IsActive = true, LanguageCode = "fr", Name = "Millimeters" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72189e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72189d"), IsActive = true, LanguageCode = "fr", Name = "Pouces" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72189f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72189d"), IsActive = true, LanguageCode = "fr", Name = "Inches" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a0"), IsActive = true, LanguageCode = "fr", Name = "Mètres" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a0"), IsActive = true, LanguageCode = "fr", Name = "Meters" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a4"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a3"), IsActive = true, LanguageCode = "fr", Name = "Pieds" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a5"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a3"), IsActive = true, LanguageCode = "fr", Name = "Feet" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a7"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a6"), IsActive = true, LanguageCode = "fr", Name = "Mètres cubes" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a8"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a6"), IsActive = true, LanguageCode = "fr", Name = "Cubic meters" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218aa"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a9"), IsActive = true, LanguageCode = "fr", Name = "Pouces cubes" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ab"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a9"), IsActive = true, LanguageCode = "fr", Name = "Cubic inches" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ad"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ac"), IsActive = true, LanguageCode = "fr", Name = "Millilitres" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ae"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ac"), IsActive = true, LanguageCode = "fr", Name = "Millilitre" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b0"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218af"), IsActive = true, LanguageCode = "fr", Name = "Pintes" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218af"), IsActive = true, LanguageCode = "fr", Name = "Pints" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b3"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b2"), IsActive = true, LanguageCode = "fr", Name = "Tonnes" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b4"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b2"), IsActive = true, LanguageCode = "fr", Name = "Tons" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b6"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b5"), IsActive = true, LanguageCode = "fr", Name = "Tonnes US" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b7"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b5"), IsActive = true, LanguageCode = "fr", Name = "US tons" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b9"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b8"), IsActive = true, LanguageCode = "fr", Name = "Pieds cubes" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ba"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b8"), IsActive = true, LanguageCode = "fr", Name = "Cubic feet" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218bc"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218bb"), IsActive = true, LanguageCode = "fr", Name = "Gallons impériaux" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218bd"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218bb"), IsActive = true, LanguageCode = "fr", Name = "Imperial gallons" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218bf"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218be"), IsActive = true, LanguageCode = "fr", Name = "Aucune" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c0"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218be"), IsActive = true, LanguageCode = "fr", Name = "None" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c1"), IsActive = true, LanguageCode = "fr", Name = "Gallons US" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c3"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c1"), IsActive = true, LanguageCode = "fr", Name = "US gallons" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c5"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c4"), IsActive = true, LanguageCode = "fr", Name = "Grammes" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c6"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c4"), IsActive = true, LanguageCode = "fr", Name = "Grams" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c8"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c7"), IsActive = true, LanguageCode = "fr", Name = "Kilos" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c9"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c7"), IsActive = true, LanguageCode = "fr", Name = "Kilos" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218cb"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ca"), IsActive = true, LanguageCode = "fr", Name = "Litres" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218cc"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ca"), IsActive = true, LanguageCode = "fr", Name = "Litres" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ce"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218cd"), IsActive = true, LanguageCode = "fr", Name = "Livres" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218cf"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218cd"), IsActive = true, LanguageCode = "fr", Name = "Pounds" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d0"), IsActive = true, LanguageCode = "fr", Name = "Onces" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d0"), IsActive = true, LanguageCode = "fr", Name = "Onces" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RoofType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_roof_type");

                    b.ToTable("roof_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a8"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ab"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ae"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b4"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b7"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ba"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217bd"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c0"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RoofTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_roof_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_roof_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("roof_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a9"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a8"), IsActive = true, LanguageCode = "fr", Name = "1 versant" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217aa"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217a8"), IsActive = true, LanguageCode = "fr", Name = "1 slope" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ac"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ab"), IsActive = true, LanguageCode = "fr", Name = "2 versants" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ad"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ab"), IsActive = true, LanguageCode = "fr", Name = "2 slopes" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217af"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ae"), IsActive = true, LanguageCode = "fr", Name = "4 versants" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b0"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ae"), IsActive = true, LanguageCode = "fr", Name = "3 slopes" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b1"), IsActive = true, LanguageCode = "fr", Name = "Cône français" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b3"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b1"), IsActive = true, LanguageCode = "fr", Name = "French cone" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b5"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b4"), IsActive = true, LanguageCode = "fr", Name = "Diamant" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b6"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b4"), IsActive = true, LanguageCode = "fr", Name = "Diamond" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b8"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b7"), IsActive = true, LanguageCode = "fr", Name = "Dôme" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b9"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217b7"), IsActive = true, LanguageCode = "fr", Name = "Dome" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217bb"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ba"), IsActive = true, LanguageCode = "fr", Name = "Mansarde" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217bc"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ba"), IsActive = true, LanguageCode = "fr", Name = "Mansard" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217be"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217bd"), IsActive = true, LanguageCode = "fr", Name = "Pente" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217bf"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217bd"), IsActive = true, LanguageCode = "fr", Name = "Slope" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c0"), IsActive = true, LanguageCode = "fr", Name = "Plat" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217c0"), IsActive = true, LanguageCode = "fr", Name = "Flat" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.SidingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_siding_type");

                    b.ToTable("siding_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d5"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d8"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217db"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217de"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e4"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e7"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ea"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ed"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.SidingTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_siding_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_siding_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("siding_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d3"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d2"), IsActive = true, LanguageCode = "fr", Name = "Brique" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d4"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d2"), IsActive = true, LanguageCode = "fr", Name = "Brick" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d6"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d5"), IsActive = true, LanguageCode = "fr", Name = "Béton" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d7"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d5"), IsActive = true, LanguageCode = "fr", Name = "Concrete" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d9"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d8"), IsActive = true, LanguageCode = "fr", Name = "Vinyle" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217da"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217d8"), IsActive = true, LanguageCode = "fr", Name = "Vinyl" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217dc"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217db"), IsActive = true, LanguageCode = "fr", Name = "Bois" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217dd"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217db"), IsActive = true, LanguageCode = "fr", Name = "Wood" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217df"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217de"), IsActive = true, LanguageCode = "fr", Name = "Canexel" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e0"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217de"), IsActive = true, LanguageCode = "fr", Name = "Canexel" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e1"), IsActive = true, LanguageCode = "fr", Name = "Pierre" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e3"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e1"), IsActive = true, LanguageCode = "fr", Name = "Stone" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e5"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e4"), IsActive = true, LanguageCode = "fr", Name = "Stucco" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e6"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e4"), IsActive = true, LanguageCode = "fr", Name = "Stucco" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e8"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e7"), IsActive = true, LanguageCode = "fr", Name = "Tôle" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e9"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217e7"), IsActive = true, LanguageCode = "fr", Name = "Sheet metal" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217eb"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ea"), IsActive = true, LanguageCode = "fr", Name = "Bardeaux de cèdre" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ec"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ea"), IsActive = true, LanguageCode = "fr", Name = "Cedar shingles" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ee"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ed"), IsActive = true, LanguageCode = "fr", Name = "Masonite" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ef"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ed"), IsActive = true, LanguageCode = "fr", Name = "Masonite" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.SprinklerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_sprinkler_type");

                    b.ToTable("sprinkler_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f0"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f3"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f6"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f9"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217fc"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ff"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721802"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721805"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721808"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72180b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72180e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721811"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.SprinklerTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_sprinkler_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_sprinkler_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("sprinkler_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f1"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f0"), IsActive = true, LanguageCode = "fr", Name = "Système sous eau" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f2"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f0"), IsActive = true, LanguageCode = "fr", Name = "Wet pipe" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f4"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f3"), IsActive = true, LanguageCode = "fr", Name = "Système sous air" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f5"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f3"), IsActive = true, LanguageCode = "fr", Name = "Dry pipe" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f7"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f6"), IsActive = true, LanguageCode = "fr", Name = "Pré action" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f8"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f6"), IsActive = true, LanguageCode = "fr", Name = "Pre-Action" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217fa"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f9"), IsActive = true, LanguageCode = "fr", Name = "Déluge" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217fb"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217f9"), IsActive = true, LanguageCode = "fr", Name = "Deluge" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217fd"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217fc"), IsActive = true, LanguageCode = "fr", Name = "Mousse" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7217fe"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217fc"), IsActive = true, LanguageCode = "fr", Name = "Foam" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721800"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ff"), IsActive = true, LanguageCode = "fr", Name = "FM 200" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721801"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db7217ff"), IsActive = true, LanguageCode = "fr", Name = "FM 200" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721803"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721802"), IsActive = true, LanguageCode = "fr", Name = "Système sous eau" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721804"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721802"), IsActive = true, LanguageCode = "fr", Name = "Wet pipe" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721806"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721805"), IsActive = true, LanguageCode = "fr", Name = "Système sous air" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721807"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721805"), IsActive = true, LanguageCode = "fr", Name = "Dry pipe" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721809"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721808"), IsActive = true, LanguageCode = "fr", Name = "Pré action" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72180a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721808"), IsActive = true, LanguageCode = "fr", Name = "Pre-Action" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72180c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72180b"), IsActive = true, LanguageCode = "fr", Name = "Déluge" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72180d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72180b"), IsActive = true, LanguageCode = "fr", Name = "Deluge" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72180f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72180e"), IsActive = true, LanguageCode = "fr", Name = "Mousse" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721810"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72180e"), IsActive = true, LanguageCode = "fr", Name = "Foam" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721812"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721811"), IsActive = true, LanguageCode = "fr", Name = "FM 200" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721813"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721811"), IsActive = true, LanguageCode = "fr", Name = "FM 200" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.UtilisationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Cubf")
                        .IsRequired()
                        .HasColumnName("cubf")
                        .HasMaxLength(5);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Scian")
                        .IsRequired()
                        .HasColumnName("scian")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("pk_utilisation_code");

                    b.ToTable("utilisation_code");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.UtilisationCodeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(250);

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_utilisation_code");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.HasKey("Id")
                        .HasName("pk_utilisation_code_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("utilisation_code_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("Altitude")
                        .HasColumnName("altitude");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasMaxLength(50);

                    b.Property<string>("Comments")
                        .HasColumnName("comments");

                    b.Property<Point>("Coordinates")
                        .HasColumnName("coordinates")
                        .HasColumnType("geography");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdCity")
                        .HasColumnName("id_city");

                    b.Property<Guid>("IdFireHydrantType")
                        .HasColumnName("id_fire_hydrant_type");

                    b.Property<Guid?>("IdIntersection")
                        .HasColumnName("id_intersection");

                    b.Property<Guid?>("IdLane")
                        .HasColumnName("id_lane");

                    b.Property<Guid>("IdOperatorTypePressure")
                        .HasColumnName("id_operator_type_pressure");

                    b.Property<Guid>("IdOperatorTypeRate")
                        .HasColumnName("id_operator_type_rate");

                    b.Property<Guid>("IdUnitOfMeasurePressure")
                        .HasColumnName("id_unit_of_measure_pressure");

                    b.Property<Guid>("IdUnitOfMeasureRate")
                        .HasColumnName("id_unit_of_measure_rate");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("LocationType")
                        .HasColumnName("location_type");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("number")
                        .HasMaxLength(10);

                    b.Property<string>("PhysicalPosition")
                        .HasColumnName("physical_position")
                        .HasMaxLength(50);

                    b.Property<string>("PressureFrom")
                        .IsRequired()
                        .HasColumnName("pressure_from")
                        .HasMaxLength(5);

                    b.Property<string>("PressureTo")
                        .IsRequired()
                        .HasColumnName("pressure_to")
                        .HasMaxLength(5);

                    b.Property<string>("RateFrom")
                        .IsRequired()
                        .HasColumnName("rate_from")
                        .HasMaxLength(5);

                    b.Property<string>("RateTo")
                        .IsRequired()
                        .HasColumnName("rate_to")
                        .HasMaxLength(5);

                    b.HasKey("Id")
                        .HasName("pk_fire_hydrant");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdFireHydrantType");

                    b.HasIndex("IdIntersection");

                    b.HasIndex("IdLane");

                    b.HasIndex("IdOperatorTypePressure");

                    b.HasIndex("IdOperatorTypeRate");

                    b.HasIndex("IdUnitOfMeasurePressure");

                    b.HasIndex("IdUnitOfMeasureRate");

                    b.ToTable("fire_hydrant");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrantConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<decimal>("Diameter")
                        .HasColumnName("diameter");

                    b.Property<Guid>("IdFireHydrant")
                        .HasColumnName("id_fire_hydrant");

                    b.Property<Guid>("IdFireHydrantConnectionType")
                        .HasColumnName("id_fire_hydrant_connection_type");

                    b.Property<Guid>("IdUnitOfMeasureDiameter")
                        .HasColumnName("id_unit_of_measure_diameter");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_fire_hydrant_connection");

                    b.HasIndex("IdFireHydrant");

                    b.HasIndex("IdFireHydrantConnectionType");

                    b.HasIndex("IdUnitOfMeasureDiameter");

                    b.ToTable("fire_hydrant_connection");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrantConnectionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_fire_hydrant_connection_type");

                    b.ToTable("fire_hydrant_connection_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72184a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72184d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrantConnectionTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_fire_hydrant_connection_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_fire_hydrant_connection_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("fire_hydrant_connection_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72184b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72184a"), IsActive = true, LanguageCode = "fr", Name = "Fileté" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72184c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72184a"), IsActive = true, LanguageCode = "fr", Name = "Threaded" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72184e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72184d"), IsActive = true, LanguageCode = "fr", Name = "Storz" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72184f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72184d"), IsActive = true, LanguageCode = "fr", Name = "Storz" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrantType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_fire_hydrant_type");

                    b.ToTable("fire_hydrant_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721850"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721853"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721856"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721859"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72185c"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72185f"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721862"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrantTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_fire_hydrant_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_fire_hydrant_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("fire_hydrant_type_localization");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721851"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721850"), IsActive = true, LanguageCode = "fr", Name = "Sèche" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721852"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721850"), IsActive = true, LanguageCode = "fr", Name = "Dry" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721854"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721853"), IsActive = true, LanguageCode = "fr", Name = "Fontaine" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721855"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721853"), IsActive = true, LanguageCode = "fr", Name = "Fountain" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721857"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721856"), IsActive = true, LanguageCode = "fr", Name = "Citerne" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721858"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721856"), IsActive = true, LanguageCode = "fr", Name = "Tank" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72185a"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721859"), IsActive = true, LanguageCode = "fr", Name = "Borne fontaine" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72185b"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721859"), IsActive = true, LanguageCode = "fr", Name = "Fire hydrant" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72185d"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72185c"), IsActive = true, LanguageCode = "fr", Name = "Point d'eau" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72185e"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72185c"), IsActive = true, LanguageCode = "fr", Name = "Water point" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721860"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72185f"), IsActive = true, LanguageCode = "fr", Name = "Borne sèche" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721861"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db72185f"), IsActive = true, LanguageCode = "fr", Name = "Dry fire hydrant" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721863"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721862"), IsActive = true, LanguageCode = "fr", Name = "Statique" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721864"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721862"), IsActive = true, LanguageCode = "fr", Name = "Static" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.OperatorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnName("symbol")
                        .HasMaxLength(3);

                    b.HasKey("Id")
                        .HasName("pk_operator_type");

                    b.ToTable("operator_type");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721865"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Symbol = "=" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721866"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Symbol = ">" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721867"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Symbol = ">=" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721868"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Symbol = "<" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721869"), CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Symbol = "<=" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasMaxLength(10);

                    b.Property<string>("Code3Letters")
                        .IsRequired()
                        .HasColumnName("code3_letters")
                        .HasMaxLength(3);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnName("email_address")
                        .HasMaxLength(100);

                    b.Property<Guid>("IdCityType")
                        .HasColumnName("id_city_type");

                    b.Property<Guid>("IdCounty")
                        .HasColumnName("id_county");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("IdCityType");

                    b.HasIndex("IdCounty");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CityLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_city");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_city_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("city_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_city_type");

                    b.ToTable("city_type");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CityTypeLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_city_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_city_type_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("city_type_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CodeAlpha2")
                        .IsRequired()
                        .HasColumnName("code_alpha2")
                        .HasMaxLength(2);

                    b.Property<string>("CodeAlpha3")
                        .IsRequired()
                        .HasColumnName("code_alpha3")
                        .HasMaxLength(3);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CountryLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_country");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_country_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("country_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.County", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdRegion")
                        .HasColumnName("id_region");

                    b.Property<Guid>("IdState")
                        .HasColumnName("id_state");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_county");

                    b.HasIndex("IdRegion");

                    b.HasIndex("IdState");

                    b.ToTable("county");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CountyLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_county");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_county_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("county_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdCounty")
                        .HasColumnName("id_county");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnName("language")
                        .HasMaxLength(2);

                    b.HasKey("Id")
                        .HasName("pk_fire_safety_department");

                    b.HasIndex("IdCounty");

                    b.ToTable("fire_safety_department");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartmentCityServing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdCity")
                        .HasColumnName("id_city");

                    b.Property<Guid>("IdFireSafetyDepartment")
                        .HasColumnName("id_fire_safety_department");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_fire_safety_department_city_serving");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdFireSafetyDepartment");

                    b.ToTable("fire_safety_department_city_serving");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartmentLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_fire_hydrant_type");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_fire_safety_department_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("fire_safety_department_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartmentRiskLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("HasBuildingAnomalies")
                        .HasColumnName("has_building_anomalies");

                    b.Property<bool>("HasBuildingContacts")
                        .HasColumnName("has_building_contacts");

                    b.Property<bool>("HasBuildingDetails")
                        .HasColumnName("has_building_details");

                    b.Property<bool>("HasBuildingFireProtection")
                        .HasColumnName("has_building_fire_protection");

                    b.Property<bool>("HasBuildingHazardousMaterials")
                        .HasColumnName("has_building_hazardous_materials");

                    b.Property<bool>("HasBuildingPNAPS")
                        .HasColumnName("has_building_pnaps");

                    b.Property<bool>("HasBuildingParticularRisks")
                        .HasColumnName("has_building_particular_risks");

                    b.Property<bool>("HasCourse")
                        .HasColumnName("has_course");

                    b.Property<bool>("HasGeneralInformation")
                        .HasColumnName("has_general_information");

                    b.Property<bool>("HasImplantationPlan")
                        .HasColumnName("has_implantation_plan");

                    b.Property<bool>("HasWaterSupply")
                        .HasColumnName("has_water_supply");

                    b.Property<Guid>("IdFireSafetyDepartment")
                        .HasColumnName("id_fire_safety_department");

                    b.Property<Guid>("IdRiskLevel")
                        .HasColumnName("id_risk_level");

                    b.Property<Guid?>("IdSurvey")
                        .HasColumnName("id_survey");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_fire_safety_department_risk_level");

                    b.HasIndex("IdRiskLevel");

                    b.HasIndex("IdSurvey");

                    b.ToTable("fire_safety_department_risk_level");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.Firestation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("FaxNumber")
                        .HasColumnName("fax_number")
                        .HasMaxLength(10);

                    b.Property<Guid?>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<Guid>("IdFireSafetyDepartment")
                        .HasColumnName("id_fire_safety_department");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasMaxLength(10);

                    b.HasKey("Id")
                        .HasName("pk_firestation");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdFireSafetyDepartment");

                    b.ToTable("firestation");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.Lane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdCity")
                        .HasColumnName("id_city");

                    b.Property<Guid?>("IdLaneGenericCode")
                        .HasColumnName("id_lane_generic_code");

                    b.Property<Guid?>("IdPublicCode")
                        .HasColumnName("id_public_code");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsValid")
                        .HasColumnName("is_valid");

                    b.HasKey("Id")
                        .HasName("pk_lane");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdLaneGenericCode");

                    b.HasIndex("IdPublicCode");

                    b.ToTable("lane");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.LaneGenericCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("AddWhiteSpaceAfter")
                        .HasColumnName("add_white_space_after");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasMaxLength(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(15);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_lane_generic_code");

                    b.ToTable("lane_generic_code");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d3"), AddWhiteSpaceAfter = false, Code = "A", Description = "", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d4"), AddWhiteSpaceAfter = true, Code = "B", Description = "À", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d5"), AddWhiteSpaceAfter = false, Code = "C", Description = "À L'", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d6"), AddWhiteSpaceAfter = true, Code = "D", Description = "À LA", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d7"), AddWhiteSpaceAfter = true, Code = "E", Description = "AU", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d8"), AddWhiteSpaceAfter = true, Code = "F", Description = "AUX", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d9"), AddWhiteSpaceAfter = true, Code = "G", Description = "CHEZ", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218da"), AddWhiteSpaceAfter = false, Code = "H", Description = "D'", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218db"), AddWhiteSpaceAfter = true, Code = "I", Description = "DE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218dc"), AddWhiteSpaceAfter = false, Code = "J", Description = "DE L'", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218dd"), AddWhiteSpaceAfter = true, Code = "K", Description = "DE LA", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218de"), AddWhiteSpaceAfter = true, Code = "L", Description = "DES", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218df"), AddWhiteSpaceAfter = true, Code = "M", Description = "DU", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e0"), AddWhiteSpaceAfter = false, Code = "N", Description = "L'", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e1"), AddWhiteSpaceAfter = true, Code = "O", Description = "LA", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e2"), AddWhiteSpaceAfter = true, Code = "P", Description = "LE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e3"), AddWhiteSpaceAfter = true, Code = "Q", Description = "LES", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e4"), AddWhiteSpaceAfter = true, Code = "R", Description = "THE", IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.LaneLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_lane");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_lane_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("lane_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.LanePublicCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasMaxLength(2);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasMaxLength(2);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_lane_public_code");

                    b.ToTable("lane_public_code");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e5"), Abbreviation = "", Code = "01", Description = "", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e6"), Abbreviation = "AL", Code = "02", Description = "ALLÉE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e7"), Abbreviation = "AU", Code = "05", Description = "AUTOROUTE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e8"), Abbreviation = "AV", Code = "08", Description = "AVENUE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218e9"), Abbreviation = "BD", Code = "11", Description = "BOULEVARD", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ea"), Abbreviation = "CA", Code = "14", Description = "CARRÉ", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218eb"), Abbreviation = "", Code = "15", Description = "CARREFOUR", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ec"), Abbreviation = "", Code = "16", Description = "CHAUSSÉE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ed"), Abbreviation = "CH", Code = "17", Description = "CHEMIN", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ee"), Abbreviation = "", Code = "19", Description = "CIRCLE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ef"), Abbreviation = "", Code = "20", Description = "CERCLE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f0"), Abbreviation = "", Code = "21", Description = "CIRCUIT", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f1"), Abbreviation = "", Code = "22", Description = "CONCESSION", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f2"), Abbreviation = "CT", Code = "23", Description = "COTE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f3"), Abbreviation = "", Code = "25", Description = "COURS", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f4"), Abbreviation = "", Code = "26", Description = "COURT", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f5"), Abbreviation = "", Code = "29", Description = "CRESCENT", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f6"), Abbreviation = "CR", Code = "32", Description = "CROISSANT", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f7"), Abbreviation = "", Code = "34", Description = "DESCENTE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f8"), Abbreviation = "", Code = "35", Description = "DESSERTE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218f9"), Abbreviation = "DO", Code = "36", Description = "DOMAINE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218fa"), Abbreviation = "", Code = "38", Description = "DRIVE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218fb"), Abbreviation = "", Code = "39", Description = "ÉCHANGEUR", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218fc"), Abbreviation = "", Code = "3a", Description = "ALLEY", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218fd"), Abbreviation = "", Code = "40", Description = "ESPLANADE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218fe"), Abbreviation = "", Code = "41", Description = "FIEF", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ff"), Abbreviation = "", Code = "44", Description = "GARDEN", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721900"), Abbreviation = "", Code = "45", Description = "GARDENS", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721901"), Abbreviation = "", Code = "46", Description = "HILL", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721902"), Abbreviation = "", Code = "47", Description = "ILE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721903"), Abbreviation = "", Code = "4a", Description = "ANSE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721904"), Abbreviation = "", Code = "50", Description = "IMPASSE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721905"), Abbreviation = "", Code = "52", Description = "JARDIN", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721906"), Abbreviation = "", Code = "53", Description = "LANE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721907"), Abbreviation = "LA", Code = "54", Description = "LAC", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721908"), Abbreviation = "", Code = "55", Description = "LIGNE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721909"), Abbreviation = "MT", Code = "56", Description = "MONTÉE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72190a"), Abbreviation = "", Code = "57", Description = "PARK", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72190b"), Abbreviation = "", Code = "58", Description = "PASSERELLE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72190c"), Abbreviation = "", Code = "59", Description = "PARC", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72190d"), Abbreviation = "", Code = "60", Description = "PISTE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72190e"), Abbreviation = "", Code = "61", Description = "PASSAGE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72190f"), Abbreviation = "PL", Code = "62", Description = "PLACE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721910"), Abbreviation = "", Code = "63", Description = "PLAGE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721911"), Abbreviation = "", Code = "64", Description = "PLAZA", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721912"), Abbreviation = "", Code = "65", Description = "PONT", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721913"), Abbreviation = "", Code = "66", Description = "PLATEAU", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721914"), Abbreviation = "", Code = "67", Description = "PORTAGE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721915"), Abbreviation = "", Code = "68", Description = "RAMPE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721916"), Abbreviation = "PR", Code = "69", Description = "PROMENADE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721917"), Abbreviation = "", Code = "70", Description = "QUAI", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721918"), Abbreviation = "RG", Code = "71", Description = "RANG", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721919"), Abbreviation = "", Code = "72", Description = "RIDGE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72191a"), Abbreviation = "", Code = "73", Description = "PETIT RANG", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72191b"), Abbreviation = "", Code = "74", Description = "ROAD", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72191c"), Abbreviation = "", Code = "75", Description = "ROND-POINT", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72191d"), Abbreviation = "", Code = "76", Description = "GRAND RANG", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72191e"), Abbreviation = "RT", Code = "77", Description = "ROUTE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72191f"), Abbreviation = "", Code = "78", Description = "ROUTE RURALE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721920"), Abbreviation = "", Code = "79", Description = "RIVIÈRE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721921"), Abbreviation = "RU", Code = "80", Description = "RUE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721922"), Abbreviation = "RL", Code = "83", Description = "RUELLE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721923"), Abbreviation = "SN", Code = "85", Description = "SENTIER", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721924"), Abbreviation = "", Code = "86", Description = "SQUARE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721925"), Abbreviation = "TE", Code = "89", Description = "TERRASSE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721926"), Abbreviation = "", Code = "91", Description = "TRAVERSE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721927"), Abbreviation = "", Code = "92", Description = "TRAIT-CARRÉ", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721928"), Abbreviation = "", Code = "93", Description = "TUNNEL", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721929"), Abbreviation = "", Code = "94", Description = "VIADUC", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72192a"), Abbreviation = "", Code = "95", Description = "VOIE", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72192b"), Abbreviation = "", Code = "96", Description = "RUISSEAU", IsActive = true },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72192c"), Abbreviation = "", Code = "97", Description = "ÎLOT", IsActive = true }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdState")
                        .HasColumnName("id_state");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_region");

                    b.HasIndex("IdState");

                    b.ToTable("region");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.RegionLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_region");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_region_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("region_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AnsiCode")
                        .IsRequired()
                        .HasColumnName("ansi_code")
                        .HasMaxLength(2);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdCountry")
                        .HasColumnName("id_country");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_state");

                    b.HasIndex("IdCountry");

                    b.ToTable("state");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.StateLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_state");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_state_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("state_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(50);

                    b.Property<Guid>("IdWebuserCreatedBy")
                        .HasColumnName("id_webuser_created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsReadyForInspection")
                        .HasColumnName("is_ready_for_inspection");

                    b.Property<DateTime?>("ShouldStartOn")
                        .HasColumnName("should_start_on");

                    b.HasKey("Id")
                        .HasName("pk_batch");

                    b.HasIndex("IdWebuserCreatedBy");

                    b.ToTable("batch");
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.BatchUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<Guid>("IdBatch")
                        .HasColumnName("id_batch");

                    b.Property<Guid>("IdWebuser")
                        .HasColumnName("id_webuser");

                    b.HasKey("Id")
                        .HasName("pk_batch_user");

                    b.HasIndex("IdBatch");

                    b.HasIndex("IdWebuser");

                    b.ToTable("batch_user");
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.Inspection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnName("completed_on");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdBatch")
                        .HasColumnName("id_batch");

                    b.Property<Guid>("IdBuilding")
                        .HasColumnName("id_building");

                    b.Property<Guid?>("IdSurvey")
                        .HasColumnName("id_survey");

                    b.Property<Guid?>("IdWebuserAssignedTo")
                        .HasColumnName("id_webuser_assigned_to");

                    b.Property<Guid>("IdWebuserCreatedBy")
                        .HasColumnName("id_webuser_created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSurveyCompleted")
                        .HasColumnName("is_survey_completed");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnName("started_on");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SurveyCompletedOn")
                        .HasColumnName("survey_completed_on");

                    b.HasKey("Id")
                        .HasName("pk_inspection");

                    b.HasIndex("IdBatch");

                    b.HasIndex("IdBuilding");

                    b.HasIndex("IdSurvey");

                    b.HasIndex("IdWebuserAssignedTo");

                    b.HasIndex("IdWebuserCreatedBy");

                    b.ToTable("inspection");
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.InspectionQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnName("answer")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdInspection")
                        .HasColumnName("id_inspection");

                    b.Property<Guid>("IdSurveyQuestion")
                        .HasColumnName("id_survey_question");

                    b.Property<Guid?>("IdSurveyQuestionChoice")
                        .HasColumnName("id_survey_question_choice");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_inspection_question");

                    b.HasIndex("IdInspection");

                    b.HasIndex("IdSurveyQuestion");

                    b.HasIndex("IdSurveyQuestionChoice");

                    b.ToTable("inspection_question");
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.InspectionVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("DoorHangerHasBeenLeft")
                        .HasColumnName("door_hanger_has_been_left");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnName("ended_on");

                    b.Property<bool>("HasBeenRefused")
                        .HasColumnName("has_been_refused");

                    b.Property<Guid>("IdInspection")
                        .HasColumnName("id_inspection");

                    b.Property<Guid?>("IdWebuserVisitedBy")
                        .HasColumnName("id_webuser_visited_by");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSeasonal")
                        .HasColumnName("is_seasonal");

                    b.Property<bool>("IsVacant")
                        .HasColumnName("is_vacant");

                    b.Property<bool>("OwnerWasAbsent")
                        .HasColumnName("owner_was_absent");

                    b.Property<string>("ReasonForApprobationRefusal")
                        .HasColumnName("reason_for_approbation_refusal");

                    b.Property<string>("ReasonForInspectionRefusal")
                        .HasColumnName("reason_for_inspection_refusal");

                    b.Property<DateTime?>("RequestedDateOfVisit")
                        .HasColumnName("requested_date_of_visit");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnName("started_on");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_inspection_visit");

                    b.HasIndex("IdInspection");

                    b.HasIndex("IdWebuserVisitedBy");

                    b.ToTable("inspection_visit");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnName("data");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("MimeType")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<string>("SketchJson")
                        .HasColumnName("sketch_json")
                        .HasColumnType("json");

                    b.HasKey("Id")
                        .HasName("pk_picture");

                    b.ToTable("picture");
                });

            modelBuilder.Entity("Survi.Prevention.Models.ReportConfigurationTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnName("data");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_report_configuration_template");

                    b.ToTable("report_configuration_template");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.AccessSecretKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnName("application_name")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("RandomKey")
                        .IsRequired()
                        .HasColumnName("random_key")
                        .HasMaxLength(100);

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnName("secret_key")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_access_secret_key");

                    b.ToTable("access_secret_key");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.AccessToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<int>("ExpiresIn")
                        .HasColumnName("expires_in");

                    b.Property<Guid>("IdWebuser")
                        .HasColumnName("id_webuser");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnName("refresh_token")
                        .HasMaxLength(100);

                    b.Property<string>("TokenForAccess")
                        .IsRequired()
                        .HasColumnName("token_for_access")
                        .HasMaxLength(500);

                    b.HasKey("Id")
                        .HasName("pk_access_token");

                    b.HasIndex("IdWebuser");

                    b.ToTable("access_token");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Access")
                        .HasColumnName("access");

                    b.Property<string>("Comments")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdPermissionObject")
                        .HasColumnName("id_permission_object");

                    b.Property<Guid>("IdPermissionSystem")
                        .HasColumnName("id_permission_system");

                    b.Property<Guid>("IdPermissionSystemFeature")
                        .HasColumnName("id_permission_system_feature");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.HasIndex("IdPermissionObject");

                    b.HasIndex("IdPermissionSystem");

                    b.HasIndex("IdPermissionSystemFeature");

                    b.ToTable("permission");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72193a"), Access = true, CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdPermissionObject = new Guid("f13400a9-70b8-4325-b732-7fe7db721936"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IdPermissionSystemFeature = new Guid("f13400a9-70b8-4325-b732-7fe7db721933") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72193b"), Access = true, CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdPermissionObject = new Guid("f13400a9-70b8-4325-b732-7fe7db721936"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IdPermissionSystemFeature = new Guid("f13400a9-70b8-4325-b732-7fe7db721931") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72193c"), Access = true, CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdPermissionObject = new Guid("f13400a9-70b8-4325-b732-7fe7db721936"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IdPermissionSystemFeature = new Guid("f13400a9-70b8-4325-b732-7fe7db721934") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72193d"), Access = true, CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdPermissionObject = new Guid("f13400a9-70b8-4325-b732-7fe7db721936"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IdPermissionSystemFeature = new Guid("f13400a9-70b8-4325-b732-7fe7db721932") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72193e"), Access = true, CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdPermissionObject = new Guid("f13400a9-70b8-4325-b732-7fe7db721936"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IdPermissionSystemFeature = new Guid("f13400a9-70b8-4325-b732-7fe7db721935") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72193f"), Access = true, CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdPermissionObject = new Guid("f13400a9-70b8-4325-b732-7fe7db721937"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IdPermissionSystemFeature = new Guid("f13400a9-70b8-4325-b732-7fe7db721933") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721940"), Access = true, CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdPermissionObject = new Guid("f13400a9-70b8-4325-b732-7fe7db721937"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IdPermissionSystemFeature = new Guid("f13400a9-70b8-4325-b732-7fe7db721931") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721941"), Access = true, CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IdPermissionObject = new Guid("f13400a9-70b8-4325-b732-7fe7db721938"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IdPermissionSystemFeature = new Guid("f13400a9-70b8-4325-b732-7fe7db721933") }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.PermissionObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("GenericId")
                        .HasColumnName("generic_id")
                        .HasMaxLength(50);

                    b.Property<string>("GroupName")
                        .HasColumnName("group_name")
                        .HasMaxLength(50);

                    b.Property<Guid?>("IdPermissionObjectParent")
                        .HasColumnName("id_permission_object_parent");

                    b.Property<Guid>("IdPermissionSystem")
                        .HasColumnName("id_permission_system");

                    b.Property<bool>("IsGroup")
                        .HasColumnName("is_group");

                    b.Property<string>("ObjectTable")
                        .IsRequired()
                        .HasColumnName("object_table")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("pk_permission_object");

                    b.HasIndex("IdPermissionObjectParent");

                    b.HasIndex("IdPermissionSystem");

                    b.ToTable("permission_object");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721936"), GenericId = "", GroupName = "Administration", IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IsGroup = true, ObjectTable = "group" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721937"), GenericId = "", GroupName = "TPI", IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IsGroup = true, ObjectTable = "group" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721938"), GenericId = "", GroupName = "Pompier", IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IsGroup = true, ObjectTable = "group" },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721939"), GenericId = "f13400a9-70b8-4325-b732-7fe7db72176c", GroupName = "", IdPermissionObjectParent = new Guid("f13400a9-70b8-4325-b732-7fe7db721936"), IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), IsGroup = false, ObjectTable = "webuser" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.PermissionSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(400);

                    b.HasKey("Id")
                        .HasName("pk_permission_system");

                    b.ToTable("permission_system");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721930"), Description = "SURVI-Prevention" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.PermissionSystemFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("DefaultValue")
                        .HasColumnName("default_value");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(255);

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnName("feature_name")
                        .HasMaxLength(50);

                    b.Property<Guid>("IdPermissionSystem")
                        .HasColumnName("id_permission_system");

                    b.HasKey("Id")
                        .HasName("pk_permission_system_feature");

                    b.HasIndex("IdPermissionSystem");

                    b.ToTable("permission_system_feature");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721931"), DefaultValue = false, Description = "Voir la section questionnaire du site", FeatureName = "RightSectionSurvey", IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721932"), DefaultValue = false, Description = "Voir la section gestion du site", FeatureName = "RightSectionManagement", IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721933"), DefaultValue = false, Description = "Voir la section inspection du site", FeatureName = "RightSectionInspection", IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721934"), DefaultValue = false, Description = "Accès en administration", FeatureName = "RightAdmin", IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721935"), DefaultValue = false, Description = "Accès pour un TPI", FeatureName = "RightTPI", IdPermissionSystem = new Guid("f13400a9-70b8-4325-b732-7fe7db721930") }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.Webuser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(100);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_webuser");

                    b.ToTable("webuser");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72176c"), CreatedOn = new DateTime(2018, 8, 2, 12, 37, 17, 659, DateTimeKind.Local), IsActive = true, Password = "EDDDFC93F0EBE76F4F79D9C83C298D1126F7F3A01259637AD028607D364FD247", Username = "admin" }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.WebuserAttributes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnName("attribute_name")
                        .HasMaxLength(50);

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasColumnName("attribute_value")
                        .HasMaxLength(50);

                    b.Property<Guid>("IdWebuser")
                        .HasColumnName("id_webuser");

                    b.HasKey("Id")
                        .HasName("pk_webuser_attributes");

                    b.HasIndex("IdWebuser");

                    b.ToTable("webuser_attributes");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72192d"), AttributeName = "last_name", AttributeValue = "Cauca", IdWebuser = new Guid("f13400a9-70b8-4325-b732-7fe7db72176c") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72192e"), AttributeName = "reset_password", AttributeValue = "false", IdWebuser = new Guid("f13400a9-70b8-4325-b732-7fe7db72176c") },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72192f"), AttributeName = "first_name", AttributeValue = "Admin", IdWebuser = new Guid("f13400a9-70b8-4325-b732-7fe7db72176c") }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.WebuserFireSafetyDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid?>("FireSafetyDepartmentId")
                        .HasColumnName("fire_safety_department_id");

                    b.Property<Guid>("IdFireSafetyDepartment")
                        .HasColumnName("id_fire_safety_department");

                    b.Property<Guid>("IdWebuser")
                        .HasColumnName("id_webuser");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_webuser_fire_safety_department");

                    b.HasIndex("FireSafetyDepartmentId")
                        .HasName("ix_webuser_fire_safety_department_fire_safety_department_id");

                    b.HasIndex("IdWebuser");

                    b.ToTable("webuser_fire_safety_department");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("SurveyType")
                        .HasColumnName("survey_type");

                    b.HasKey("Id")
                        .HasName("pk_survey");

                    b.ToTable("survey");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_survey");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_survey_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("survey_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdSurvey")
                        .HasColumnName("id_survey");

                    b.Property<Guid?>("IdSurveyQuestionNext")
                        .HasColumnName("id_survey_question_next");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRecursive")
                        .HasColumnName("is_recursive");

                    b.Property<int>("QuestionType")
                        .HasColumnName("question_type");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("pk_survey_question");

                    b.HasIndex("IdSurvey");

                    b.HasIndex("IdSurveyQuestionNext");

                    b.ToTable("survey_question");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyQuestionChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdSurveyQuestion")
                        .HasColumnName("id_survey_question");

                    b.Property<Guid?>("IdSurveyQuestionNext")
                        .HasColumnName("id_survey_question_next");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("Sequence")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("pk_survey_question_choice");

                    b.HasIndex("IdSurveyQuestion");

                    b.HasIndex("IdSurveyQuestionNext");

                    b.ToTable("survey_question_choice");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyQuestionChoiceLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_survey_question_choice");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_survey_question_choice_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("survey_question_choice_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyQuestionLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_survey_question");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(100);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_survey_question_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("survey_question_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnName("abbreviation")
                        .HasMaxLength(5);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("MeasureType")
                        .HasColumnName("measure_type");

                    b.HasKey("Id")
                        .HasName("pk_unit_of_measure");

                    b.ToTable("unit_of_measure");

                    b.HasData(
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72187c"), Abbreviation = "GIPM", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72187f"), Abbreviation = "GPM", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721882"), Abbreviation = "LPM", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721885"), Abbreviation = "GI", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721888"), Abbreviation = "G", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72188b"), Abbreviation = "L", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72188e"), Abbreviation = "", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721891"), Abbreviation = "PSI", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721894"), Abbreviation = "KPA", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db721897"), Abbreviation = "m3/h", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72189a"), Abbreviation = "mm", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db72189d"), Abbreviation = "po", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a0"), Abbreviation = "m", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a3"), Abbreviation = "pi", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a6"), Abbreviation = "m3", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218a9"), Abbreviation = "po3", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ac"), Abbreviation = "ml", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218af"), Abbreviation = "pt", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b2"), Abbreviation = "t", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b5"), Abbreviation = "sh tn", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218b8"), Abbreviation = "pi3", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218bb"), Abbreviation = "GI", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218be"), Abbreviation = "", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c1"), Abbreviation = "G", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c4"), Abbreviation = "g", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218c7"), Abbreviation = "Kg", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218ca"), Abbreviation = "L", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218cd"), Abbreviation = "lb", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 },
                        new { Id = new Guid("f13400a9-70b8-4325-b732-7fe7db7218d0"), Abbreviation = "oz", CreatedOn = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, MeasureType = 0 }
                    );
                });

            modelBuilder.Entity("Survi.Prevention.Models.UnitOfMeasureLocalization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on");

                    b.Property<Guid>("IdParent")
                        .HasColumnName("id_parent");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnName("language_code")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_unit_of_measure_localization");

                    b.HasIndex("IdParent");

                    b.ToTable("unit_of_measure_localization");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.FloorParticularRisk", b =>
                {
                    b.HasBaseType("Survi.Prevention.Models.Buildings.BuildingParticularRisk");


                    b.ToTable("FloorParticularRisk");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.FoundationParticularRisk", b =>
                {
                    b.HasBaseType("Survi.Prevention.Models.Buildings.BuildingParticularRisk");


                    b.ToTable("FoundationParticularRisk");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RoofParticularRisk", b =>
                {
                    b.HasBaseType("Survi.Prevention.Models.Buildings.BuildingParticularRisk");


                    b.ToTable("RoofParticularRisk");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.WallParticularRisk", b =>
                {
                    b.HasBaseType("Survi.Prevention.Models.Buildings.BuildingParticularRisk");


                    b.ToTable("WallParticularRisk");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.AlarmPanelTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.AlarmPanelType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_alarm_panel_type_localization_alarm_panel_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.Building", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .HasConstraintName("fk_building_cities_city_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Lane", "Lane")
                        .WithMany()
                        .HasForeignKey("IdLane")
                        .HasConstraintName("fk_building_lanes_lane_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Lane", "Transversal")
                        .WithMany()
                        .HasForeignKey("IdLaneTransversal")
                        .HasConstraintName("fk_building_lanes_transversal_id");

                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("IdParentBuilding")
                        .HasConstraintName("fk_building_building_parent_id");

                    b.HasOne("Survi.Prevention.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_building_pictures_picture_id");

                    b.HasOne("Survi.Prevention.Models.Buildings.RiskLevel", "RiskLevel")
                        .WithMany()
                        .HasForeignKey("IdRiskLevel")
                        .HasConstraintName("fk_building_risk_levels_risk_level_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.Buildings.UtilisationCode", "UtilisationCode")
                        .WithMany()
                        .HasForeignKey("IdUtilisationCode")
                        .HasConstraintName("fk_building_utilisation_codes_utilisation_code_id");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingAlarmPanel", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.AlarmPanelType", "AlarmPanelType")
                        .WithMany()
                        .HasForeignKey("IdAlarmPanelType")
                        .HasConstraintName("fk_building_alarm_panel_alarm_panel_type_alarm_panel_type_id");

                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("AlarmPanels")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_alarm_panel_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingAnomaly", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("Anomalies")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_anomaly_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingAnomalyPicture", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.BuildingAnomaly", "Anomaly")
                        .WithMany("Pictures")
                        .HasForeignKey("IdBuildingAnomaly")
                        .HasConstraintName("fk_building_anomaly_picture_building_anomaly_anomaly_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_building_anomaly_picture_pictures_picture_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingContact", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("Contacts")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_contact_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingCourse", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("Courses")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_course_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Firestation", "Firestation")
                        .WithMany()
                        .HasForeignKey("IdFirestation")
                        .HasConstraintName("fk_building_course_firestations_firestation_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingCourseLane", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.BuildingCourse", "Course")
                        .WithMany("Lanes")
                        .HasForeignKey("IdBuildingCourse")
                        .HasConstraintName("fk_building_course_lane_building_course_course_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Lane", "Lane")
                        .WithMany()
                        .HasForeignKey("IdLane")
                        .HasConstraintName("fk_building_course_lane_lanes_lane_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingDetail", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.ConstructionFireResistanceType", "FireResistanceType")
                        .WithMany()
                        .HasForeignKey("FireResistanceTypeId")
                        .HasConstraintName("fk_building_detail_construction_fire_resistance_types_fire_resist~");

                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithOne("Detail")
                        .HasForeignKey("Survi.Prevention.Models.Buildings.BuildingDetail", "IdBuilding")
                        .HasConstraintName("fk_building_building_details_detail_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.Buildings.SidingType", "SidingType")
                        .WithMany()
                        .HasForeignKey("IdBuildingSidingType")
                        .HasConstraintName("fk_building_detail_siding_types_siding_type_id");

                    b.HasOne("Survi.Prevention.Models.Buildings.BuildingType", "BuildingType")
                        .WithMany()
                        .HasForeignKey("IdBuildingType")
                        .HasConstraintName("fk_building_detail_building_types_building_type_id");

                    b.HasOne("Survi.Prevention.Models.Buildings.ConstructionType", "ConstructionType")
                        .WithMany()
                        .HasForeignKey("IdConstructionType")
                        .HasConstraintName("fk_construction_type");

                    b.HasOne("Survi.Prevention.Models.Picture", "PlanPicture")
                        .WithMany()
                        .HasForeignKey("IdPicturePlan")
                        .HasConstraintName("fk_building_detail_pictures_plan_picture_id");

                    b.HasOne("Survi.Prevention.Models.Buildings.RoofMaterialType", "RoofMaterialType")
                        .WithMany()
                        .HasForeignKey("IdRoofMaterialType")
                        .HasConstraintName("fk_building_detail_roof_material_types_roof_material_type_id");

                    b.HasOne("Survi.Prevention.Models.Buildings.RoofType", "RoofType")
                        .WithMany()
                        .HasForeignKey("IdRoofType")
                        .HasConstraintName("fk_building_detail_roof_types_roof_type_id");

                    b.HasOne("Survi.Prevention.Models.UnitOfMeasure", "EstimatedWaterFlowUnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("IdUnitOfMeasureEstimatedWaterFlow")
                        .HasConstraintName("fk_unit_of_measure_ewf");

                    b.HasOne("Survi.Prevention.Models.UnitOfMeasure", "HeightUnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("IdUnitOfMeasureHeight")
                        .HasConstraintName("fk_unit_of_measure_height");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingFireHydrant", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("FireHydrants")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_fire_hydrant_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireHydrants.FireHydrant", "Hydrant")
                        .WithMany()
                        .HasForeignKey("IdFireHydrant")
                        .HasConstraintName("fk_building_fire_hydrant_fire_hydrants_hydrant_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingHazardousMaterial", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("HazardousMaterials")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_hazardous_material_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.Buildings.HazardousMaterial", "Material")
                        .WithMany()
                        .HasForeignKey("IdHazardousMaterial")
                        .HasConstraintName("fk_building_hazardous_material_hazardous_materials_material_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.UnitOfMeasure", "Unit")
                        .WithMany()
                        .HasForeignKey("IdUnitOfMeasure")
                        .HasConstraintName("fk_building_hazardous_material_unit_of_measures_unit_id");
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_building_localization_building_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingParticularRisk", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("ParticularRisks")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_particular_risk_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingParticularRiskPicture", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.BuildingParticularRisk", "Risk")
                        .WithMany("Pictures")
                        .HasForeignKey("IdBuildingParticularRisk")
                        .HasConstraintName("fk_building_particular_risk_picture_building_particular_risk_r~")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("IdPicture")
                        .HasConstraintName("fk_building_particular_risk_picture_pictures_picture_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingPersonRequiringAssistance", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("PersonsRequiringAssistance")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_person_requiring_assistance_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.Buildings.PersonRequiringAssistanceType", "PersonType")
                        .WithMany()
                        .HasForeignKey("IdPersonRequiringAssistanceType")
                        .HasConstraintName("fk_building_person_requiring_assistance_person_requiring_assista~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingSprinkler", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany("Sprinklers")
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_building_sprinkler_building_building_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.Buildings.SprinklerType", "SprinklerType")
                        .WithMany()
                        .HasForeignKey("IdSprinklerType")
                        .HasConstraintName("fk_building_sprinkler_sprinkler_types_sprinkler_type_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.BuildingTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.BuildingType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_building_type_localization_building_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.ConstructionFireResistanceTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.ConstructionFireResistanceType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_construction_fire_resistance_type_localization_construction~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.ConstructionTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.ConstructionType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_construction_type_localization_construction_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.HazardousMaterialLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.HazardousMaterial", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_hazardous_material_localization_hazardous_material_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.PersonRequiringAssistanceTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.PersonRequiringAssistanceType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_person_requiring_assistance_type_localization_person_requir~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RiskLevelLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.RiskLevel", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_risk_level_localization_risk_level_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RoofMaterialTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.RoofMaterialType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_roof_material_type_localization_roof_material_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.RoofTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.RoofType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_roof_type_localization_roof_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.SidingTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.SidingType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_siding_type_localization_siding_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.SprinklerTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.SprinklerType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_sprinkler_type_localization_sprinkler_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.Buildings.UtilisationCodeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.UtilisationCode", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_utilisation_code_localization_utilisation_code_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrant", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.City", "City")
                        .WithMany()
                        .HasForeignKey("IdCity")
                        .HasConstraintName("fk_fire_hydrant_cities_city_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireHydrants.FireHydrantType", "HydrantType")
                        .WithMany()
                        .HasForeignKey("IdFireHydrantType")
                        .HasConstraintName("fk_fire_hydrant_fire_hydrant_types_hydrant_type_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Lane", "Intersection")
                        .WithMany()
                        .HasForeignKey("IdIntersection")
                        .HasConstraintName("fk_fire_hydrant_lanes_intersection_id");

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Lane", "Lane")
                        .WithMany()
                        .HasForeignKey("IdLane")
                        .HasConstraintName("fk_fire_hydrant_lanes_lane_id");

                    b.HasOne("Survi.Prevention.Models.FireHydrants.OperatorType", "PressureOperatorType")
                        .WithMany()
                        .HasForeignKey("IdOperatorTypePressure")
                        .HasConstraintName("fk_fire_hydrant_operator_types_pressure_operator_type_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireHydrants.OperatorType", "RateOperatorType")
                        .WithMany()
                        .HasForeignKey("IdOperatorTypeRate")
                        .HasConstraintName("fk_fire_hydrant_operator_types_rate_operator_type_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.UnitOfMeasure", "PressureUnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("IdUnitOfMeasurePressure")
                        .HasConstraintName("fk_fire_hydrant_unit_of_measures_pressure_unit_of_measure_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.UnitOfMeasure", "RateUnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("IdUnitOfMeasureRate")
                        .HasConstraintName("fk_fire_hydrant_unit_of_measures_rate_unit_of_measure_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrantConnection", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireHydrants.FireHydrant", "Hydrant")
                        .WithMany("Connections")
                        .HasForeignKey("IdFireHydrant")
                        .HasConstraintName("fk_fire_hydrant_connection_fire_hydrant_hydrant_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireHydrants.FireHydrantConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("IdFireHydrantConnectionType")
                        .HasConstraintName("fk_fire_hydrant_connection_fire_hydrant_connection_types_connecti~")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.UnitOfMeasure", "DiameterUnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("IdUnitOfMeasureDiameter")
                        .HasConstraintName("fk_fire_hydrant_connection_unit_of_measures_diameter_unit_of_mea~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrantConnectionTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireHydrants.FireHydrantConnectionType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_fire_hydrant_connection_type_localization_fire_hydrant_conn~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireHydrants.FireHydrantTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireHydrants.FireHydrantType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_fire_hydrant_type_localization_fire_hydrant_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.City", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.CityType", "CityType")
                        .WithMany()
                        .HasForeignKey("IdCityType")
                        .HasConstraintName("fk_city_city_types_city_type_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.County", "County")
                        .WithMany("Cities")
                        .HasForeignKey("IdCounty")
                        .HasConstraintName("fk_city_counties_county_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CityLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.City", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_city_localization_city_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CityTypeLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.CityType", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_city_type_localization_city_type_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CountryLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Country", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_country_localization_country_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.County", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Region", "Region")
                        .WithMany("Counties")
                        .HasForeignKey("IdRegion")
                        .HasConstraintName("fk_county_regions_region_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.State", "State")
                        .WithMany("Counties")
                        .HasForeignKey("IdState")
                        .HasConstraintName("fk_county_states_state_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.CountyLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.County", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_county_localization_county_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartment", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.County", "County")
                        .WithMany("FireSafetyDepartments")
                        .HasForeignKey("IdCounty")
                        .HasConstraintName("fk_fire_safety_department_county_county_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartmentCityServing", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.City", "City")
                        .WithMany("ServedByFireSafetyDepartments")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("fk_fire_safety_department_city_serving_city_city_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartment", "FireSafetyDepartment")
                        .WithMany("FireSafetyDepartmentServing")
                        .HasForeignKey("IdFireSafetyDepartment")
                        .HasConstraintName("fk_fire_safety_department_city_serving_fire_safety_department_~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartmentLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartment", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_fire_safety_department_localization_fire_safety_department_~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartmentRiskLevel", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.RiskLevel", "RiskLevel")
                        .WithMany()
                        .HasForeignKey("IdRiskLevel")
                        .HasConstraintName("fk_fire_safety_department_risk_level_risk_level_risk_level_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SurveyManagement.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("IdSurvey")
                        .HasConstraintName("fk_fire_safety_department_risk_level_surveys_survey_id");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.Firestation", b =>
                {
                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "Building")
                        .WithMany()
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_firestation_building_building_id");

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartment", "FireSafetyDepartment")
                        .WithMany("Firestations")
                        .HasForeignKey("IdFireSafetyDepartment")
                        .HasConstraintName("fk_firestation_fire_safety_department_fire_safety_department_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.Lane", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.City", "City")
                        .WithMany("Lanes")
                        .HasForeignKey("IdCity")
                        .HasConstraintName("fk_lane_city_city_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.LaneGenericCode", "LaneGenericCode")
                        .WithMany()
                        .HasForeignKey("IdLaneGenericCode")
                        .HasConstraintName("fk_lane_lane_generic_codes_lane_generic_code_id");

                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.LanePublicCode", "PublicCode")
                        .WithMany()
                        .HasForeignKey("IdPublicCode")
                        .HasConstraintName("fk_lane_lane_public_codes_public_code_id");
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.LaneLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Lane", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_lane_localization_lane_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.Region", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.State", "State")
                        .WithMany("Regions")
                        .HasForeignKey("IdState")
                        .HasConstraintName("fk_region_states_state_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.RegionLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Region", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_region_localization_region_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.State", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("IdCountry")
                        .HasConstraintName("fk_state_country_country_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.FireSafetyDepartments.StateLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.State", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_state_localization_state_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.Batch", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SecurityManagement.Webuser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("IdWebuserCreatedBy")
                        .HasConstraintName("fk_batch_webusers_created_by_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.BatchUser", b =>
                {
                    b.HasOne("Survi.Prevention.Models.InspectionManagement.Batch", "Batch")
                        .WithMany("Users")
                        .HasForeignKey("IdBatch")
                        .HasConstraintName("fk_batch_user_batch_batch_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SecurityManagement.Webuser", "User")
                        .WithMany()
                        .HasForeignKey("IdWebuser")
                        .HasConstraintName("fk_batch_user_webusers_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.Inspection", b =>
                {
                    b.HasOne("Survi.Prevention.Models.InspectionManagement.Batch", "Batch")
                        .WithMany("Inspections")
                        .HasForeignKey("IdBatch")
                        .HasConstraintName("fk_inspection_batch_batch_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.Buildings.Building", "MainBuilding")
                        .WithMany()
                        .HasForeignKey("IdBuilding")
                        .HasConstraintName("fk_inspection_building_main_building_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SurveyManagement.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("IdSurvey")
                        .HasConstraintName("fk_inspection_surveys_survey_id");

                    b.HasOne("Survi.Prevention.Models.SecurityManagement.Webuser", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("IdWebuserAssignedTo")
                        .HasConstraintName("fk_inspection_webusers_assigned_to_id");

                    b.HasOne("Survi.Prevention.Models.SecurityManagement.Webuser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("IdWebuserCreatedBy")
                        .HasConstraintName("fk_inspection_webusers_created_by_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.InspectionQuestion", b =>
                {
                    b.HasOne("Survi.Prevention.Models.InspectionManagement.Inspection", "Inspection")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("IdInspection")
                        .HasConstraintName("fk_inspection_question_inspection_inspection_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SurveyManagement.SurveyQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("IdSurveyQuestion")
                        .HasConstraintName("fk_inspection_question_survey_questions_question_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SurveyManagement.SurveyQuestionChoice", "Choice")
                        .WithMany()
                        .HasForeignKey("IdSurveyQuestionChoice")
                        .HasConstraintName("fk_inspection_question_survey_question_choices_choice_id");
                });

            modelBuilder.Entity("Survi.Prevention.Models.InspectionManagement.InspectionVisit", b =>
                {
                    b.HasOne("Survi.Prevention.Models.InspectionManagement.Inspection", "Inspection")
                        .WithMany("Visits")
                        .HasForeignKey("IdInspection")
                        .HasConstraintName("fk_inspection_visit_inspection_inspection_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SecurityManagement.Webuser", "VisitedBy")
                        .WithMany()
                        .HasForeignKey("IdWebuserVisitedBy")
                        .HasConstraintName("fk_inspection_visit_webusers_visited_by_id");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.AccessToken", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SecurityManagement.Webuser", "User")
                        .WithMany()
                        .HasForeignKey("IdWebuser")
                        .HasConstraintName("fk_access_token_webusers_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.Permission", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SecurityManagement.PermissionObject", "PermissionObject")
                        .WithMany()
                        .HasForeignKey("IdPermissionObject")
                        .HasConstraintName("fk_permission_permission_object_permission_object_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SecurityManagement.PermissionSystem", "System")
                        .WithMany("Permissions")
                        .HasForeignKey("IdPermissionSystem")
                        .HasConstraintName("fk_permission_permission_systems_system_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SecurityManagement.PermissionSystemFeature", "Feature")
                        .WithMany()
                        .HasForeignKey("IdPermissionSystemFeature")
                        .HasConstraintName("fk_permission_permission_system_feature_feature_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.PermissionObject", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SecurityManagement.PermissionObject", "Parent")
                        .WithMany()
                        .HasForeignKey("IdPermissionObjectParent")
                        .HasConstraintName("fk_permission_object_permission_object_parent_id");

                    b.HasOne("Survi.Prevention.Models.SecurityManagement.PermissionSystem", "System")
                        .WithMany("Objects")
                        .HasForeignKey("IdPermissionSystem")
                        .HasConstraintName("fk_permission_object_permission_systems_system_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.PermissionSystemFeature", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SecurityManagement.PermissionSystem", "System")
                        .WithMany("Features")
                        .HasForeignKey("IdPermissionSystem")
                        .HasConstraintName("fk_permission_system_feature_permission_system_system_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.WebuserAttributes", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SecurityManagement.Webuser", "User")
                        .WithMany("Attributes")
                        .HasForeignKey("IdWebuser")
                        .HasConstraintName("fk_webuser_attributes_webuser_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.SecurityManagement.WebuserFireSafetyDepartment", b =>
                {
                    b.HasOne("Survi.Prevention.Models.FireSafetyDepartments.FireSafetyDepartment", "FireSafetyDepartment")
                        .WithMany()
                        .HasForeignKey("FireSafetyDepartmentId")
                        .HasConstraintName("fk_webuser_fire_safety_department_fire_safety_department_fire_~");

                    b.HasOne("Survi.Prevention.Models.SecurityManagement.Webuser", "User")
                        .WithMany("FireSafetyDepartments")
                        .HasForeignKey("IdWebuser")
                        .HasConstraintName("fk_webuser_fire_safety_department_webuser_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SurveyManagement.Survey", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_survey_localization_survey_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyQuestion", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SurveyManagement.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("IdSurvey")
                        .HasConstraintName("fk_survey_question_survey_survey_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SurveyManagement.SurveyQuestion", "NextQuestion")
                        .WithMany()
                        .HasForeignKey("IdSurveyQuestionNext")
                        .HasConstraintName("fk_survey_question_survey_question_next_question_id");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyQuestionChoice", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SurveyManagement.SurveyQuestion", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("IdSurveyQuestion")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Survi.Prevention.Models.SurveyManagement.SurveyQuestion", "NextQuestion")
                        .WithMany()
                        .HasForeignKey("IdSurveyQuestionNext");
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyQuestionChoiceLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SurveyManagement.SurveyQuestionChoice", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_survey_question_choice_localization_survey_question_choice_~")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.SurveyManagement.SurveyQuestionLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.SurveyManagement.SurveyQuestion", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_survey_question_localization_survey_question_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Survi.Prevention.Models.UnitOfMeasureLocalization", b =>
                {
                    b.HasOne("Survi.Prevention.Models.UnitOfMeasure", "Parent")
                        .WithMany("Localizations")
                        .HasForeignKey("IdParent")
                        .HasConstraintName("fk_unit_of_measure_localization_unit_of_measure_parent_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
